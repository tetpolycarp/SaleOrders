using System;
using System.Collections;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using Telerik.Web.UI;

namespace Mitchell.ScmConsoles.NewCDBConsole
{
    public partial class NewAdminCDB : System.Web.UI.Page
    {
        SqlConnection con, EUcon, CAcon;
        private List<TextBox> DynamicTextBoxes;
        public List<DropDownList> DynamicDropdownList;


        protected void Page_Load(object sender, EventArgs e)
        {
            BindGridAdmin();
            //  MultiView1.ActiveViewIndex = 0;
            View1.Visible = true;
            View2.Visible = false;
            SQLConnectionString();


        }

        private void SQLConnectionString()
        {
            string connStr = ConfigurationManager.ConnectionStrings["MitchellCDBConnection"].ToString();
            con = new SqlConnection(connStr);

            string CAconnStr = ConfigurationManager.ConnectionStrings["CACDBConnection"].ToString();
            CAcon = new SqlConnection(CAconnStr);

            string EUconnStr = System.Configuration.ConfigurationManager.ConnectionStrings["EUCDBConnection"].ToString();
            EUcon = new SqlConnection(EUconnStr);

        }

        protected void RadGrid1_InsertCommand(object sender, GridCommandEventArgs e)
        {
            //GridEditableItem item = e.Item as GridEditableItem;

            ////GridEditableItem insertedItem = e.Item.OwnerTableView.GetInsertItem();
            //GridEditableItem insertedItem = RadGrid1.MasterTableView.GetInsertItem();
            //GridEditFormItem editFormItem = insertedItem as GridEditFormItem;
            //TextBox txtbox = item["ServerName"].Controls[0] as TextBox;


        }

        // Returns a SQL INSERT command. Assumes autoincrement is identity (optional)




        protected void btnAdd_Click(object sender, EventArgs e)
        {



        }

        protected void RadGrid1_ItemUpdated(object sender, GridUpdatedEventArgs e)
        {

        }

        private void BindGridAdmin()
        {
            SQLConnectionString();
            con.Open();
            SqlCommand cmd = null;
            string query = "select * from ess.dbo.MitchellCDB";
            cmd = new SqlCommand(query, con);
            SqlDataAdapter da = new SqlDataAdapter(cmd);
            DataSet ds = new DataSet();
            da.Fill(ds);
            con.Close();


            //RadGrid1.DataSource = ds;

            if (ds.Tables[0].Rows.Count > 0)
            {
                RadGrid1.DataSource = ds;
                RadGrid1.DataBind();
                RadGrid1.MasterTableView.GetColumn("seq_id").Display = false;
                // //   RadGrid1.MasterTableView.CommandItemDisplay = GridCommandItemDisplay.Top;
                //    //GridEditCommandColumn EditColumn = new GridEditCommandColumn();
                //    //GridClientDeleteColumn Delete = new GridClientDeleteColumn();
                //    //RadGrid1.MasterTableView.Columns.Add(Delete);
                //  //  this.RadGrid1.AutoGenerateDeleteColumn = true;
            }
        }
        protected void RadGrid1_ItemCommand(object sender, GridCommandEventArgs e)
        {

            int sequenceID = 0;
            string serverName = string.Empty;

            if (e.CommandName == "Delete")
            {
                Response.Write("<script>alert('Are You Sure To Delete ?');</script>");
                HiddenField hdnSeqID = e.Item.FindControl("hdnSeqID") as HiddenField;
                sequenceID = Convert.ToInt32(hdnSeqID.Value);
                HiddenField hdnServerNames = e.Item.FindControl("hdnServerName") as HiddenField;
                serverName = Convert.ToString(hdnServerNames.Value);
                GridDataItem item = e.Item as GridDataItem;

                //sequenceID = Convert.ToInt32(item["hdnSeqID"].Text);
                //serverName = item["hdnServerName"].Text;

                con.Open();
                CAcon.Open();
                SqlCommand getRegion = new SqlCommand("select Region from ess.dbo.MitchellCDB where seq_id = '" + sequenceID + "'", con);
                string Region = getRegion.ExecuteScalar().ToString();

                // string query = "delete from ess.dbo.MitchellCDB where ServerName='" + serverName + "' and seq_id=" + sequenceID;
                SqlCommand cmd = new SqlCommand("delete from ess.dbo.MitchellCDB where ServerName='" + serverName + "' and seq_id='" + sequenceID + "'", con);
                int result = cmd.ExecuteNonQuery();
                if (result > 0)
                {
                    //  ScriptManager.RegisterClientScriptBlock(Page, typeof(Page), "ClientScript", "alert('Deleted from US')", true);
                    Response.Write("<script>alert('Deleted from US');</script>");

                }
                SqlCommand CAcmd = new SqlCommand("delete from ess.dbo.MitchellCDB where ServerName='" + serverName + "' and seq_id=" + sequenceID, CAcon);
                int CAresult = CAcmd.ExecuteNonQuery();
                if (CAresult > 0)
                {
                    // ScriptManager.RegisterClientScriptBlock(Page, typeof(Page), "ClientScript", "alert('Deleted from US')", true);
                    Response.Write("<script>alert('Deleted from Canada');</script>");

                }
                con.Close();
                CAcon.Close();


                if (Region.Equals("EU"))
                {
                    EUcon.Open();
                    SqlCommand EUcmd = new SqlCommand("delete from ess.dbo.MitchellCDB where ServerName='" + serverName + "' and seq_id=" + sequenceID, EUcon);
                    int EUresult = EUcmd.ExecuteNonQuery();

                    EUcon.Close();

                }
                BindGridAdmin();
            }

            if (e.CommandName == "Refresh")
            {
                BindGridAdmin();
            }
        }



        protected override void OnInit(EventArgs e)
        {
            SQLConnectionString();
            base.OnInit(e);
            DynamicTextBoxes = new List<TextBox>();
            DynamicDropdownList = new List<DropDownList>();
            DataTable Table = new DataTable("[dbo].[MitchellCDB]");
            string queryStatement = "SELECT name FROM sys.columns WHERE object_id = OBJECT_ID('[dbo].[MitchellCDB]') ";

            using (SqlCommand _cmd = new SqlCommand(queryStatement, con))
            {
                SqlDataAdapter _dap = new SqlDataAdapter(_cmd);
                con.Open();
                _dap.Fill(Table);
                con.Close();

            }

            TableRow tr = null;
            TableCell td1 = null;
            //Dynamic table creation
            foreach (DataRow dataRow in Table.Rows)
            {
                foreach (var item in dataRow.ItemArray)
                {
                    if (item.ToString() != "seq_id")
                    {
                        int count = 0;
                        var ddlBox = new DropDownList();
                        if (item.ToString() != "BaseEnv" && item.ToString() != "MiddleWare")
                        {

                            Console.WriteLine(item);

                            tr = new TableRow();
                            td1 = new TableCell();
                            TableCell td2 = new TableCell();
                            Label lblDynamic = new Label();
                            lblDynamic.Text = item.ToString();
                            lblDynamic.ID = item.ToString() + count++.ToString();

                            var tbox = new TextBox { ID = item.ToString() };
                            td1.Controls.Add(lblDynamic);
                            td2.Controls.Add(tbox);
                            tr.Cells.Add(td1);
                            tr.Cells.Add(td2);
                            tblAdd.Rows.Add(tr);
                            DynamicTextBoxes.Add(tbox);
                        }
                        else
                        {

                            tr = new TableRow();
                            td1 = new TableCell();
                            TableCell td2 = new TableCell();
                            Label lblDynamic = new Label();
                            lblDynamic.Text = item.ToString();
                            lblDynamic.ID = item.ToString() + count++.ToString();
                            ddlBox.ID = item.ToString() + count++;

                            //filling drop down list 
                            con.Open();
                            //  SqlCommand cmd = null;
                            string query = "select distinct(" + item.ToString() + ") from [dbo].[MitchellCDB]";
                            SQLConnectionString();
                            using (SqlCommand cmd = new SqlCommand(query))
                            {
                                cmd.CommandType = CommandType.Text;
                                cmd.Connection = con;
                                con.Open();
                                ddlBox.DataSource = cmd.ExecuteReader();
                                ddlBox.DataTextField = item.ToString();
                                ddlBox.DataBind();
                                con.Close();

                            }




                            //cmd = new SqlCommand(query, con);
                            //SqlDataAdapter da = new SqlDataAdapter(cmd);
                            //DataTable dt = new DataTable();
                            //da.Fill(dt);
                            // con.Close();

                            //ddlBox.DataSource = dt.Rows[0].ToString();
                            // ddlBox.DataSource = dt.Columns[0].ToString();
                            //ddlBox.DataBind();
                            //var ddlBox = new DropDownList { ID = item.ToString() };

                            td1.Controls.Add(lblDynamic);
                            td2.Controls.Add(ddlBox);
                            tr.Cells.Add(td1);
                            tr.Cells.Add(td2);
                            tblAdd.Rows.Add(tr);
                            // DynamicDropdownList.Add(ddlBox);

                        }
                    }

                }



                tblAdd.EnableViewState = true;
                ViewState["tblAdd"] = true;
            }
        }
        protected void btnInsert_Click(object sender, EventArgs e)
        {

            //  string tableName = "[dbo].[MitchellCDB]";
            var output = new StringBuilder();
            StringBuilder colName = new StringBuilder();
            StringBuilder valName = new StringBuilder();
            StringBuilder valnumeric = new StringBuilder();
            StringBuilder buildFloat = new StringBuilder();
            
            List<float> list = new List<float>();

            foreach (var tbox in DynamicTextBoxes)
            {
                if (tbox.ID.ToString() != "OSBits" && tbox.ID.ToString() != "MiddleWareVersion")
                {
                    colName.Append(tbox.ID.ToString() + ",");
                    valName.Append("'" + tbox.Text.ToString() + "',");
                }

                else
                {

                    list.Add((float.Parse(tbox.Text.ToString())));
                    //valnumeric.Append(tbox.Text.ToString());
                    //  string temt=Convert.ToString(valnumeric)


                }

            }
            foreach(var dbox in DynamicDropdownList) {

                colName.Append(dbox.ID.ToString() + ",");
                valName.Append("'"+dbox.SelectedItem.Text.ToString()+"',");

            }

            colName.Append("OSBits," + "MiddleWareVersion");


            for (int i = 0; i < list.Count; i++)
            {
                buildFloat.Append(list[i] + ",");

            }



            DynamicInsert(colName.ToString(), valName.ToString(), buildFloat.ToString());
        }



        public string DynamicInsertforCanEu(String colName, string colValues, string list)
        {
            StringBuilder insertQuery = new StringBuilder();


            string normalisedVal = colValues.TrimEnd(colValues[colValues.Length - 1]);
            string normalisedList = list.TrimEnd(list[list.Length - 1]);
            //handleFloatvalue(numVal);

            insertQuery = new StringBuilder("INSERT INTO [dbo].[MitchellCDB] (" + colName.ToString() + ") VALUES(" + normalisedVal.ToString() + "," + normalisedList.ToString());


            //check

            return insertQuery.ToString();
        }

        public string DynamicInsert(String colName, string colValues, string list)
        {
            StringBuilder insertQuery = new StringBuilder();


            string normalisedVal = colValues.TrimEnd(colValues[colValues.Length - 1]);
            string normalisedList = list.TrimEnd(list[list.Length - 1]);
            //handleFloatvalue(numVal);

            insertQuery = new StringBuilder("INSERT INTO [dbo].[MitchellCDB] (" + colName.ToString() + ") VALUES(" + normalisedVal.ToString() + "," + normalisedList.ToString() + ")");


            ExecuteQuery(insertQuery.ToString());  //check

            return insertQuery.ToString();
        }


        public string ExecuteQuery(String query)
        {
            String vipAddress = string.Empty;
            String serverName = string.Empty;
            String region = string.Empty;
            string baseEnv = string.Empty;
            string environmentName = string.Empty;
            int Sequence_ID;

            foreach (var tbox in DynamicTextBoxes)
            {
                if (tbox.ID.ToString() == "VIP_Address")
                {
                    vipAddress = tbox.Text.ToString();
                }
                if (tbox.ID.ToString() == "ServerName")
                {
                    serverName = tbox.Text.ToString();
                }
                if (tbox.ID.ToString() == "BaseEnv")
                {
                    baseEnv = tbox.Text.ToString();
                }
                if (tbox.ID.ToString() == "EnvironmentName")
                {
                    environmentName = tbox.Text.ToString();
                }
                if (tbox.ID.ToString() == "Region")
                {
                    region = tbox.Text.ToString();
                }
            }
            Console.WriteLine(environmentName);
            Match m = Regex.Match(vipAddress.ToString(), @"\b(?:https?://|www\.)\S+\b");


            if (m.Value != "" || vipAddress.ToString() == "")

            {
                con.Open();

                SqlCommand cmd = new SqlCommand(query, con);
                int result = cmd.ExecuteNonQuery();

            }
            SqlCommand getID = new SqlCommand("select seq_id from ess.dbo.MitchellCDB where ServerName='" + serverName + "' and BaseEnv='" + baseEnv + "'and VIP_Address='" + vipAddress + "'and EnvironmentName='" + environmentName + "'and Region='" + region + "'", con);
            Sequence_ID = Convert.ToInt32(getID.ExecuteScalar());
            con.Close();

            FillCanEUDb(region, Sequence_ID);
            return null;
        }



        protected void FillCanEUDb(string region, int seqID)
        {
            string query = getCanEUDynamicInsertQuery() + "," + seqID + ")";


            SQLConnectionString();
            CAcon.Open();

            SqlCommand cmd = new SqlCommand(query, CAcon);
            int result = cmd.ExecuteNonQuery();
            CAcon.Close();

            if (region == "EU")
            {
                EUcon.Open();
                SqlCommand eucmd = new SqlCommand(query, EUcon);
                // int result1 = eucmd.ExecuteNonQuery();
                EUcon.Close();
            }
            CAcon.Close();

        }

        protected void RadGrid1_UpdateCommand(object sender, GridCommandEventArgs e)
        {

            SQLConnectionString();
            GridEditableItem edit = e.Item as GridEditableItem;
            try
            {

                string CustomerID = edit.GetDataKeyValue("seq_id").ToString();
                TextBox txt = (TextBox)edit["Region"].Controls[0];
                string sequence = (edit["ServerName"].Controls[0] as TextBox).Text;
                DataTable Table = new DataTable("[dbo].[MitchellCDB]");
                string queryStatement = "SELECT name FROM sys.columns WHERE object_id = OBJECT_ID('[dbo].[MitchellCDB]') ";
                //TextBox txt2 = (TextBox)edit["ServerName"].Controls[0];
                //string s = txt2.Text;
                using (SqlCommand _cmd = new SqlCommand(queryStatement, con))
                {
                    SqlDataAdapter _dap = new SqlDataAdapter(_cmd);
                    con.Open();
                    _dap.Fill(Table);
                    con.Close();
                }


                //Dynamic Update query
                foreach (DataRow dataRow in Table.Rows)
                {
                    foreach (var item in dataRow.ItemArray)
                    {
                        if (txt.Text == "US")
                        {
                            con.Open();
                            CAcon.Open();
                            //  GridEditableItem edit1 = (GridEditableItem)e.Item;
                            GridEditableItem editedItem = e.Item as GridEditableItem;
                            string xyz = (editedItem[item.ToString()].Controls[0] as TextBox).Text;
                            //RadGrid1.DataBind();
                            string query = "UPDATE MitchellCDB SET " + item.ToString() + " ='" + xyz + "' WHERE seq_id = " + CustomerID + "";
                            SqlCommand cmd = new SqlCommand(query, CAcon);
                            int result = cmd.ExecuteNonQuery();
                            con.Close();
                            CAcon.Close();
                        }
                        if (txt.Text == "EU")
                        {
                            EUcon.Open();
                            TextBox txt1 = (TextBox)edit[item.ToString()].Controls[0];
                            string query = "UPDATE MitchellCDB SET " + item.ToString() + " ='" + txt1.Text + "' WHERE seq_id = " + CustomerID + "";
                            SqlCommand cmd = new SqlCommand(query, CAcon);
                            int result = cmd.ExecuteNonQuery();
                            EUcon.Close();

                        }

                    }
                }

            }
            catch (Exception ex)
            {
            }
        }

        protected void linkDecommisoen_Click(object sender, EventArgs e)
        {
            Response.Redirect("~/NewCDBConsole/NewDecommisionedServer.aspx");
        }

        protected void linkOldCDB_Click(object sender, EventArgs e)
        {
            Response.Redirect("~/AdminPages/AdminCDBConsole.aspx");
        }

        protected string getCanEUDynamicInsertQuery()
        {
            // ServerName,BaseEnv,EnvironmentName,MiddleWare,MiddleWareVersion,Client,OperatingSystem,OSBits,Platform,BaseMount,Region,EnvironmentALias,ApplicationRoot,TokenPool,VIP_Address,Status



            var output = new StringBuilder();
            StringBuilder colName = new StringBuilder();
            StringBuilder valName = new StringBuilder();
            StringBuilder valnumeric = new StringBuilder();
            StringBuilder buildFloat = new StringBuilder();
            List<float> list = new List<float>();

            foreach (var tbox in DynamicTextBoxes)
            {
                if (tbox.ID.ToString() != "Product")
                {
                    if (tbox.ID.ToString() != "OSBits" && tbox.ID.ToString() != "MiddleWareVersion")
                    {
                        colName.Append(tbox.ID.ToString() + ",");
                        valName.Append("'" + tbox.Text.ToString() + "',");
                    }

                    else
                    {

                        list.Add((float.Parse(tbox.Text.ToString())));
                        //valnumeric.Append(tbox.Text.ToString());
                        //  string temt=Convert.ToString(valnumeric)


                    }
                }

            }

            colName.Append("OSBits," + "MiddleWareVersion," + "seq_id");


            for (int i = 0; i < list.Count; i++)
            {
                buildFloat.Append(list[i] + ",");

            }
            string finalQuery = DynamicInsertforCanEu(colName.ToString(), valName.ToString(), buildFloat.ToString());

            return finalQuery;

        }
        protected void btnAddNew_Click(object sender, EventArgs e)
        {
            View1.Visible = true;
            View2.Visible = true;
            btnAddNew.Visible = false;

        }

    }

}